#!/bin/bash
PITAYA_DIR="${PITAYA_LIB_PATH}";
WORKING_FOLDER=$( pwd );



## FUNCTIONS
function UNMOUNT_PROJ {
	for DIR in $( find "${WORKING_FOLDER}" -mindepth 1 -maxdepth 1 -type d -not -name "." -not -name ".." ); do
		CANDIDATES=$( mount -l | grep "${DIR}" );
		if [ "${#CANDIDATES[@]}" -eq "0" ]; then continue; fi;

		for CANDIDATE_PATHS in "${CANDIDATES[@]}"; do
			read -a RESULT_COMPS <<< "${CANDIDATE_PATHS}";
			if [ "${RESULT_COMPS[2]}" == "${DIR}" ]; then
				umount ${DIR}
			fi;
		done;
	done;
}

function STDERR { cat - 1>&2; }
###






## Check Pitaya Library Path
if [ "${PITAYA_DIR}" == "" ]; then
	echo "PITAYA_LIB_PATH environmental variable is not defined!" | STDERR;
	exit 1;
fi;

## Check command
mode=$1;

if [ "${mode}" == "-c" ]; then
	shift;
	command=$1;
	case "${command}" in
		"create" )
			shift;
			ProjDir="$1";
			if [ "${ProjDir}" != "" ]; then
				mkdir "${ProjDir}";
				cd "${ProjDir}";
			fi



			if [ ! -e "./Pitaya" ]; then mkdir Pitaya; fi;
			if [ ! -e "./Services" ]; then mkdir Services; fi;
			if [ ! -e "./Share" ]; then mkdir Share; fi;

			find "${PITAYA_DIR}/env/http" -type f -exec cp \{\} ./ \;
			find "${PITAYA_DIR}/env/macosx" -type f -not -name "pitaya" -exec cp \{\} ./ \;

			if [ -e "cli.example.php" ]; then mv "cli.example.php" "cli.php"; fi;
			if [ -e "config.example.php" ]; then mv "config.example.php" "config.php"; fi;
			if [ -e "common.example.php" ]; then mv "common.example.php" "common.php"; fi;
			if [ -e "config-host.example.php" ]; then
				if [ "$1" == "--host-base" ] || [ "$1" == "-h" ]; then shift;
					mv "config-host.example.php" "config-host.php";
				else
					rm "config-host.example.php";
				fi;
			fi;

			echo -e "\n\nmount -o bind \"${PITAYA_DIR}/src\" \"./Pitaya\"\n" >> "./.boot.sh";
			exit 0;
		;;

		"unmount" )
			UNMOUNT_PROJ
			exit 0;
		;;

		"showmount" )
			mount_list=$( mount -l | grep $(pwd) );
			echo "${mount_list[@]}";
			exit 0;
		;;

		"destroy" )
			UNMOUNT_PROJ
			find "${WORKING_FOLDER}" -mindepth 1 -maxdepth 1 -not -name "." -not -name ".." -exec rm -rf \{\} \;
			exit 0;
		;;

		* )
			if [ ! "${command}" == "" ]; then
				echo "${command} is not a valid command!" | STDERR;
			fi;

			echo "Supported commands are create, unmount, showmount and destroy!" | STDERR;

			exit 1;
		;;
	esac;

	exit 0;
fi



if [ -f "${mode}" ]; then
	shift;
	count=0; while [ "$#" -gt "0" ]; do ARGS[$count]=$( echo "$1" ); shift; (( count++ )); done;
	"${PITAYA_DIR}/src/portal.sh" -entry "${mode}" "${ARGS[@]}"
elif [ ! -e "./Pitaya/portal.sh" ]; then
	count=0; while [ "$#" -gt "0" ]; do ARGS[$count]=$( echo "$1" ); shift; (( count++ )); done;
	"${PITAYA_DIR}/src/portal.sh" "${ARGS[@]}"
else
	count=0; while [ "$#" -gt "0" ]; do ARGS[$count]=$( echo "$1" ); shift; (( count++ )); done;
	./Pitaya/portal.sh "${ARGS[@]}"
fi
